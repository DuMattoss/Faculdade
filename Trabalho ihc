import sys
import json
import csv
import time

def carregar_automato(arquivo_aut):
    with open(arquivo_aut, 'r') as f:
        dados = json.load(f)
    inicial = dados["initial"]
    finais = set(dados["final"])
    transicoes = {}
    for trans in dados["transitions"]:
        origem = trans["from"]
        leitura = trans["read"]
        destino = trans["to"]
        if origem not in transicoes:
            transicoes[origem] = {}
        if leitura not in transicoes[origem]:
            transicoes[origem][leitura] = set()
        transicoes[origem][leitura].add(destino)
    return inicial, finais, transicoes

def clausura_epsilon(estados, transicoes):
    pilha = list(estados)
    visitados = set(estados)
    while pilha:
        estado = pilha.pop()
        for destino in transicoes.get(estado, {}).get(None, []):
            if destino not in visitados:
                visitados.add(destino)
                pilha.append(destino)
    return visitados

def processar_palavra_afn(inicial, finais, transicoes, palavra):
    estados_atuais = clausura_epsilon({inicial}, transicoes)
    for simbolo in palavra:
        proximos = set()
        for estado in estados_atuais:
            destinos = transicoes.get(estado, {}).get(simbolo, set())
            proximos.update(destinos)
        estados_atuais = clausura_epsilon(proximos, transicoes)
        if not estados_atuais:
            return 0
    return 1 if estados_atuais & finais else 0

def executar_simulador(arquivo_aut, arquivo_in, arquivo_out):
    inicial, finais, transicoes = carregar_automato(arquivo_aut)
    resultados = []
    with open(arquivo_in, 'r') as f_in:
        leitor = csv.reader(f_in, delimiter=';')
        for linha in leitor:
            palavra, esperado = linha
            inicio = time.time()
            obtido = processar_palavra_afn(inicial, finais, transicoes, palavra)
            fim = time.time()
            duracao = f"{(fim - inicio):.3f}"
            resultados.append([palavra, esperado, obtido, duracao])
    with open(arquivo_out, 'w', newline='') as f_out:
        escritor = csv.writer(f_out, delimiter=';')
        escritor.writerow(['palavra', 'esperado', 'obtido', 'tempo'])
        escritor.writerows(resultados)

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Uso: python simulador.py <automato.aut> <entradas.in> <saida.out>")
        sys.exit(1)
    executar_simulador(sys.argv[1], sys.argv[2], sys.argv[3])
    print('Simulacao concluida')
